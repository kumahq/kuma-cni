version: 2.1 # Adds support for executors, parameterized jobs, etc

reusable:

  constants:
  - &go_version "1.18"

  vm_images:
  - &ubuntu_vm_image "ubuntu-2004:202111-01"

# See https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version-21.
commands:
  install_build_tools:
    description: "Install an upstream Go release to $HOME/go"
    parameters:
      go_os:
        type: string
        default: linux
      go_arch:
        type: string
        default: amd64
      go_version:
        type: string
        default: *go_version
    steps:
    - run:
        name: "Install basic tools"
        command: |
          if [ -r /etc/os-release ]; then source /etc/os-release; fi
          case "$ID" in
          ubuntu)
            if ! command -v sudo 2>&1 >/dev/null; then
              apt update
              apt install -y sudo
            fi
            ;;
          esac

    - run:
        name: "Install Go"
        # See https://golang.org/doc/install#tarball
        command: |
          curl -s --fail --location https://dl.google.com/go/go<<parameters.go_version>>.<<parameters.go_os>>-<<parameters.go_arch>>.tar.gz | tar -xz -C $HOME
          # if GOPATH is not set, `golang-ci` fails with an obscure message
          # "ERRO Running error: context loading failed: failed to load program
          # with go/packages: could not determine GOARCH and Go compiler"
          echo 'export GOPATH=$HOME/.go-kuma-net-go' >> $BASH_ENV
          echo 'export PATH=$HOME/.go-kuma-net-go/bin:$PATH' >> $BASH_ENV

executors:
  vm-amd64:
    resource_class: large
    machine:
      image: *ubuntu_vm_image
    environment:
      GO_VERSION: *go_version

  vm-arm64:
    resource_class: arm.large
    machine:
      image: *ubuntu_vm_image
    environment:
      GO_VERSION: *go_version

jobs:
  go_cache:
    executor: << parameters.executor >>

    parameters:
      executor:
        description: "the executor to run on"
        type: string
        default: vm-amd64

    steps:
    - when:
        condition: {equal: [vm-amd64, << parameters.executor >>]}
        steps:
        - install_build_tools:
            go_arch: amd64

    - when:
        condition: {equal: [vm-arm64, << parameters.executor >>]}
        steps:
        - install_build_tools:
            go_arch: arm64

    - checkout

    - run:
        name: "Download Go modules"
        command: |
          go mod download

    # since execution of go commands might change contents of "go.sum",
    #  we have to save cache immediately
    - save_cache:
        key: << parameters.executor >>-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}
        paths:
        - "/go/pkg/mod"
        - "/root/.go-kuma-net-go"

  unit-tests-iptables:
    parameters:
      arch:
        description: "The golang arch"
        type: string
        default: amd64

    executor:
      name: vm-<< parameters.arch >>

    steps:
    - install_build_tools:
        go_arch: << parameters.arch >>
        go_os: linux

    - checkout

    - restore_cache:
        keys:
        # prefer the exact match
        - vm-<< parameters.arch >>-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}

    - run:
        name: "Run unit tests"
        command: |
          export GINKGO_TEST_RESULTS_DIR=/tmp/ginkgo-test-results
          go test ./iptables/...

    - store_artifacts:
        path: build/coverage
        destination: /coverage

    - store_test_results:
        path: /tmp/ginkgo-test-results

  blackbox-tests-iptables:
    parameters:
      parallelism:
        description: "level of parallelization"
        type: integer
        default: 8
      arch:
        description: "The golang arch"
        type: string
        default: amd64

    machine:
      # The image uses the current tag, which always points to the most recent
      # supported release. If stability and determinism are crucial for your CI
      # pipeline, use a release date tag with your image, e.g. ubuntu-2004:202201-02
      image: ubuntu-2004:current

#    parallelism: << parameters.parallelism >>

    steps:
    - run:
        name: "Dump params"
        command: |
          echo "Running with: \
            parallelism:<< parameters.parallelism >> \
            arch:<< parameters.arch >> \
          "

    - install_build_tools:
        go_arch: << parameters.arch >>

    - checkout

    - restore_cache:
        keys:
        # prefer the exact match
        - vm-<< parameters.arch >>-go.mod-{{ .Branch }}-{{ checksum "go.sum" }}

    - run:
        name: "Download go mods"
        command: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          
          ls -lah $HOME/.go-kuma-net-go/bin

    - run:
        name: "Run blackbox tests"
        command: |
          env
          sudo "PATH=$PATH" $(which ginkgo) run ./test/blackbox_tests/...

    - store_test_results:
        path: /tmp/ginkgo-test-results

workflows:
  version: 2

  pr:
    jobs:
    - go_cache:
        name: go_cache-<< matrix.executor >>
        matrix:
          alias: go_cache
          parameters:
            executor: [vm-amd64, vm-arm64]

    - unit-tests-iptables:
        name: unit-tests-iptables-<< matrix.arch >>
        matrix:
          alias: unit-tests-iptables
          parameters:
            arch: [amd64, arm64]

    - blackbox-tests-iptables:
        name: blackbox-tests-iptables-<< matrix.arch >>
        matrix:
          alias: blackbox-tests-iptables
          parameters:
            arch: [amd64, arm64]
